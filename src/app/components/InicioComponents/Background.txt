"use client";
import React, { useEffect, useRef, useState } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { OrbitControls, RoundedBox } from "@react-three/drei";
import * as THREE from "three";

interface SceneProps {
  scaleModel: number;
}

// Componente del cubo que rota
const RotatingCube = ({ scaleModel }: SceneProps) => {
  const cubeRef = useRef<THREE.Mesh>(null); // Referencia al cubo

  // Animación del cubo
  useFrame((state, delta) => {
    if (cubeRef.current) {
      const speedFactor = 0.1; // Ajusta este valor para cambiar la velocidad (menos de 1 = más lento, más de 1 = más rápido)
      cubeRef.current.rotation.x += delta * speedFactor;
      cubeRef.current.rotation.y += delta * speedFactor; // Rotación en el eje Y
      cubeRef.current.rotation.z += delta * speedFactor; // Rotación en el eje Z
    }
  });

  return (
    <RoundedBox
      ref={cubeRef} // Asignar la referencia al cubo
      args={[4, 4, 4]} // Tamaño del cubo (ancho, alto, profundidad)
      radius={0.2} // Radio de redondeo de las esquinas
      smoothness={20} // Suavidad de las esquinas
      position={[0, 0, 0]} // Posición del cubo
      scale={scaleModel} // Escala del cubo
    >
      <meshPhysicalMaterial
        color="black" // Color base
        roughness={0.3} // Controla el aspecto mate (0 = brillante, 1 = mate)
        metalness={0.5} // Controla el aspecto metálico (0 = no metálico, 1 = metálico)
        clearcoat={1} // Capa de barniz para un acabado más realista
        clearcoatRoughness={0.5} // Rugosidad de la capa de barniz
        transmission={0.9} // Refracción de la luz (0 = opaco, 1 = transparente)
        opacity={1} // Opacidad del material
      />
    </RoundedBox>
  );
};

const LightScene = ({ scaleModel }: SceneProps) => {
  return (
    <>
      <RotatingCube scaleModel={scaleModel}/>
    </>
  );
};

const Scene = ({ scaleModel }: SceneProps) => {
  const directionalLight1Ref = useRef(null);
  const directionalLight2Ref = useRef(null);

  return (
    <Canvas camera={{ position: [5, 0, 5] }}>
      {/* Luz ambiental */}
      <ambientLight intensity={0.5} />

      {/* Luz direccional desde la izquierda */}
      <directionalLight
        ref={directionalLight1Ref} 
        position={[-5, -3, 5]} 
        intensity={100} 
        color={"#003566"}
        castShadow 
      />

      {/* Luz direccional desde la derecha */}
      <directionalLight
        ref={directionalLight2Ref} 
        position={[5, -5, 5]} 
        intensity={20}
        color={"#F5CC00"} 
        castShadow 
      />

      <LightScene scaleModel={scaleModel}/>
      <OrbitControls enableZoom={false} />
    </Canvas>
  );
};

export const Background = () => {
  const [scaleUp, setScaleUp] = useState(false);
  const [grab, setGrab] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const [translateXScroll, setTranslateXScroll] = useState(0);
  const [scaleModel, setScaleModel] = useState(1);

  useEffect(() => {
    setScaleUp(true);
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      const localTranslateXScroll = Math.min(currentScrollY / 100, 20);
      const localScaleModel = 1 + Math.min(Math.max(currentScrollY / 5000, 0), .3);      setScaleModel(localScaleModel);
      setTranslateXScroll(localTranslateXScroll);
    };

    addEventListener("scroll", handleScroll);

    return () => {
      removeEventListener("scroll", handleScroll);
    };
  }, []);

  return (
    <div
      className="w-screen h-screen fixed top-0 left-0 flex justify-center items-center z-50 pointer-events-none"
      style={{
        opacity: scaleUp ? 1 : 0,
        filter: scaleUp ? "blur(0px)" : "blur(100px)",
        transition: "opacity 3s ease-in-out, filter 4s ease-in-out",
        transform: `translateX(-${translateXScroll}%)`,
      }}
      ref={containerRef}
    >
      <div
        className="w-[30vw]  aspect-square "
        style={{
          cursor: grab ? "grabbing" : "grab",
        }}
        onMouseDown={() => {
          setGrab(true);
        }}
        onMouseUp={() => {
          setGrab(false);
        }}
      >
        <Scene scaleModel={scaleModel}/>
      </div>
    </div>
  );
};
